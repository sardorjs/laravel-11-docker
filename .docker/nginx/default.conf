server{
    # указываем Nginx слушать HTTP-запросы на порту 80
    listen 80;
    # Рекомендуется также настроить SSL
    # listen 443 ssl http2;

    # Указываем корневую директорию для вашего Laravel приложения. Путь должен указывать на директорию "public"
    root /var/www/public;
    #Указываем файлы, которые будут использоваться в качестве индекса
    index index.php index.html;

    # Увеличиваем размер загружаемых файлов
    client_max_body_size 64M;

    # Защита от XSS атак
    add_header X-XSS-Protection "1; mode=block";
    # Защита от кликджекинга
    add_header X-Frame-Options "SAMEORIGIN";
    # Защита от MIME-type sniffing
    add_header X-Content-Type-Options "nosniff";
    # Политика безопасности контента
    add_header Content-Security-Policy "default-src 'self' 'unsafe-inline' 'unsafe-eval' data: https:; img-src 'self' data: https:;";


    # Защита от GIT Source Code Exposure
    location ~ /\.git {
        deny all;
        return 404;
    }

    # Защита важных файлов Laravel
    location ~ ^/(\.env|artisan|composer\.json|package\.json|README\.md|LICENSE|composer\.lock|package-lock\.json|phpunit\.xml|webpack\.mix\.js) {
        deny all;
        return 404;
    }

    # Запрет доступа к директориям хранения данных
    location ~ ^/(storage|bootstrap/cache) {
        deny all;
        return 404;
    }

    # Настраивает основное местоположение, обрабатывающее все запросы, и перенаправляет их на index.php с параметрами запроса.
    location / {
        # Пробуем отдать файл или директорию напрямую, если не найдено, перенаправляем на index.php с параметрами запроса
        try_files $uri $uri/ /index.php?$query_string;
    }

    location ~ \.php$ {
        # Включаем стандартные параметры FastCGI
        include fastcgi_params;
        # Перехватываем ошибки FastCGI и передаем их Nginx для обработки
        fastcgi_intercept_errors on;
        # Указываем, что PHP-FPM сервис находится на хосте "app" (имя сервиса в Docker Compose) и порту 9000
        fastcgi_pass app:9000;
        # Устанавливаем полный путь к обрабатываемому PHP-файлу
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        # Устанавливаем значение переменной PATH_INFO
        fastcgi_param PATH_INFO $fastcgi_path_info;

        # Настройки буферизации FastCGI
        # Количество и размер буферов для FastCGI ответов
        fastcgi_buffers 128 4096k;        # 128 буферов по 4MB каждый
        # Размер начального буфера для чтения первой части ответа
        fastcgi_buffer_size 4096k;        # Начальный буфер 4MB
        # Максимальный размер буферов, которые могут быть заняты
        fastcgi_busy_buffers_size 4096k;  # Размер занятых буферов 4MB

        # Настройки буферизации прокси
        # Размер буфера для чтения заголовков ответа прокси сервера
        proxy_buffer_size   128k;         # Буфер для заголовков 128KB
        # Количество и размер буферов для чтения ответа прокси сервера
        proxy_buffers   4 256k;           # 4 буфера по 256KB
        # Максимальный размер буферов, которые могут быть заняты при чтении ответа
        proxy_busy_buffers_size   256k;   # Размер занятых буферов 256KB

        # Таймауты для медленных запросов
        fastcgi_read_timeout 60;
        fastcgi_send_timeout 60;
        fastcgi_connect_timeout 60;
    }

    # Запрет доступа к .htaccess и другим скрытым файлам
    location ~ /\.ht {
        # Запрещаем доступ к файлам, начинающимся с ".ht", для безопасности
        deny all;
    }

    # Отключение отображения версии Nginx
    server_tokens off;

    # Ограничение методов HTTP
    if ($request_method !~ ^(GET|HEAD|POST|PUT|DELETE|OPTIONS)$) {
        return 405;
    }

}
